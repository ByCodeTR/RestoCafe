// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  CASHIER
  WAITER
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  MAINTENANCE
}

enum OrderStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum PaymentType {
  CASH
  CREDIT_CARD
  DEBIT_CARD
}

enum StockLogType {
  IN
  OUT
  ADJUSTMENT
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  name      String
  role      Role     @default(WAITER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Area {
  id        String   @id @default(uuid())
  name      String
  tables    Table[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Table {
  id        String      @id @default(uuid())
  number    Int
  capacity  Int
  status    TableStatus @default(AVAILABLE)
  area      Area        @relation(fields: [areaId], references: [id])
  areaId    String
  orders    Order[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Category {
  id        String    @id @default(uuid())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String?
  price       Float
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  stock       Int         @default(0)
  minStock    Int         @default(10)
  orderItems  OrderItem[]
  stockLogs   StockLog[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Order {
  id          String      @id @default(uuid())
  table       Table       @relation(fields: [tableId], references: [id])
  tableId     String
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  status      OrderStatus @default(ACTIVE)
  total       Float
  items       OrderItem[]
  paymentType PaymentType?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Supplier {
  id          String    @id @default(uuid())
  name        String
  contactName String?
  phone       String?
  email       String?
  address     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  stockLogs   StockLog[]
}

model StockLog {
  id         String      @id @default(uuid())
  product    Product     @relation(fields: [productId], references: [id])
  productId  String
  supplier   Supplier?   @relation(fields: [supplierId], references: [id])
  supplierId String?
  quantity   Int
  type       StockLogType
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
} 